#! /bin/bash

RED='\033[0;31m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;36m'
NC='\033[0m' # No Color

KEY_NAME=id_rsa
SSH_DIR=$HOME/.ssh
FULL_PATH=$SSH_DIR/$KEY_NAME
PUBLIC_KEY=$FULL_PATH.pub
AUTHORIZED_KEY_FILE=$SSH_DIR/authorized_keys

if [[ -z $1 ]]; then
    echo -e "Pass in a to create a private key with no password"
    echo -e "Pass in b to create a private key with a password"
    echo -e "Pass in c to delete the private key"
    echo -e "Example: $YELLOW./SetupSsh a$NC"
    exit
fi

cd $HOME
#pwd

function setupKey() {
    # -t: Type of key
    # -P: Passphrase which is initially empty
    # -f: The file name of the key to create
    # -v: Describe what you are doing
    if [ ! -f "$FULL_PATH" ]; then
        echo -e "${YELLOW}Creating key: $FULL_PATH${NC}"
        ssh-keygen -v -t rsa -P '' -f $FULL_PATH
        cat $PUBLIC_KEY >> $AUTHORIZED_KEY_FILE
		echo -e "${LIGHT_GREEN}Created: $FULL_PATH${NC}"
		
		if [ $1 = true ]; then 
           # Change the passphrase
           ssh-keygen -p -f "$FULL_PATH"
        fi
        
    else
        echo -e "${RED}Key already exists:"
        echo -e "\t- ${YELLOW}$FULL_PATH."
        echo -e "\t- ${LIGHT_GREEN}Exiting without making changes${NC}"
    fi
}

function removeKey() {
    rm -v $FULL_PATH
    #rm -v $PUBLIC_KEY
    #rm -v $AUTHORIZED_KEY_FILE
}

case $1 in
	[Aa]* ) setupKey false;;
	[Bb]* ) setupKey true;;
	[Cc]* ) removeKey;;
esac

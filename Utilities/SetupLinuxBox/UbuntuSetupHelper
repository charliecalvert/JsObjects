#! /bin/bash

# This script will set up a node development environment on Ubuntu based
# distros such as Ubuntu, Lubuntu and Mint. 

# RED='\033[0;31m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;36m'
NC='\033[0m' # No Color

SETUP_LINUXBOX=$HOME/Git/JsObjects/Utilities/SetupLinuxBox/
NODE_UTILS=$HOME/Git/JsObjects/Utilities/NodeInstall/
BASH_ALIAS=$SETUP_LINUXBOX/.bash_aliases
BASHRC=$HOME/.bashrc
BASH_ALIAS_LINK=$HOME/.bash_aliases
GIT_HOME=$HOME/Git
JSOBJECTS=$GIT_HOME/JsObjects
BIN_DIR=$HOME/bin
CNBRE=$SETUP_LINUXBOX/CloudNineBashRcExtras.txt
BASH_RC_EXTRAS=$SETUP_LINUXBOX/BashrcExtras

function message {
    echo
    echo =======================
    echo "$1"
    echo =======================
    echo
}

function gitSetup() {
    if [ ! -d "$GIT_HOME" ]; then
        echo "=> Creating Git directory"
        mkdir ~/Git
    else
        echo "=> Git directory already exists"
    fi
    cd ~/Git || exit
    if [ ! -d "$JSOBJECTS" ]; then
        echo "=> Cloning JsObjects"
        git clone https://github.com/charliecalvert/JsObjects.git
    else
        echo "=> JsObjects already exists"
    fi
}

function setBashAliasAndSymbolicLinks() {
    if [ -f "$BASH_ALIAS_LINK" ]; then
        echo "=> Moving old ~/.bash_aliases to ~/.bash_aliases.old"
        mv "$BASH_ALIAS_LINK" "$BASH_ALIAS_LINK.old"
        echo "=> Done"
    else
        echo "=> The ~/.bash_aliases does not exist"
    fi

    if [ ! -L "$BASH_ALIAS_LINK" ]; then
        echo "=> Creating ~/.bash_aliases symbolic link"
        ln -s "$BASH_ALIAS" "$BASH_ALIAS_LINK"
        echo "=> Done"
    else
        echo "=> ~/.bash_aliases already exists"
    fi
    shopt -s expand_aliases
    /bin/bash "$SETUP_LINUXBOX"/CreateSymbolicLinks
}

function setupBashRc() {
    if grep -Fq "NODE_PATH" "$BASHRC"
    then
        echo "=> Found NODE_PATH in .bashrc. No changes"
    else
        echo "=> Did not find NODE_PATH in .bashrc. Adding it."
        cp "$BASHRC" "$BASHRC.old"
        if [ "$1" = true ]; then
            cat "$CNBRE" >> "$BASHRC"
        else
            cat "$BASH_RC_EXTRAS" >> "$BASHRC"
        fi
    fi
}

function clean() {
    if [ -d "$GIT_HOME" ]; then
        echo "=> Deleting Git Directory and all contents"
        rm -rf "$GIT_HOME"
        echo "=> Done"
    else
        echo "=> Not deleting Git Directory because it does not exist"
    fi
    if [ -L "$BASH_ALIAS_LINK" ]; then
        echo "=> Deleting bash alias link and restoring original .bash_aliases"
        rm ~/.bash_aliases
        mv "$BASH_ALIAS_LINK.old" "$BASH_ALIAS_LINK"
        echo "=> Done"
    else
        echo "=> Not deleting bash alias link because it does not exist"
    fi

    if  [ -L "$BIN_DIR/CreateExpressProject" ]; then
        echo "=> Deleting symbolic links in bin directory"
        rm "$BIN_DIR"/CreateExpressProject
        rm "$BIN_DIR"/CreateAllExpress
        rm "$BIN_DIR"/check-karma-grunt-config
        rm "$BIN_DIR"/strip-triple-spaces
        rm "$BIN_DIR"/StartPythonWebServer
        rm "$BIN_DIR"/TestReady
        rm "$BIN_DIR"/TestCheck
        rm "$BIN_DIR"/elfgrepcomps
        rm "$BIN_DIR"/FixtureReady
        rm "$BIN_DIR"/InsertJadeExecGrunt.py
        rm "$BIN_DIR"/ShowPath
        echo "=> Done"
    else
        echo "=> -----------"
        echo "=> Not deleting symbolic links in bin directory "
        echo "=> because we think they don't exist "
        echo "=> -----------"
    fi
}

function nodeSetup() {
    message "Installing Node"
    sudo apt-get install build-essential
    "$NODE_UTILS"/NodeInstall.sh
    echo "=> When you exit, run: 'nvm use system'"
}

function nodePackages() {
    message "Installing Node Packages"
    "$NODE_UTILS"/NpmHelper e u
}

function runBasics() {
    gitSetup
    setBashAliasAndSymbolicLinks
    setupBashRc "$1"
}

function runAll() {
    runBasics "$1"
    nodeSetup
    nodePackages
}

if [ "$1" = "b" ]; then
	runBasics
	exit
fi

while [ "$1" != "" ]; do
    case $1 in
        [Aa]* ) runAll false; shift;;
        [Bb]* ) runBasics false; shift;;
        [Cc]* ) runAll true; shift;;
        [Dd]* ) runBasics true; shift;;
        [Nn]* ) nodeSetup; shift;;
        [Pp]* ) nodePackages; shift;;
        [Rr]* ) clean; shift;;
        [XxQq]* ) break;;        
    esac
done

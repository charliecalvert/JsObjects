{
	// Place your snippets for javascript here. Each snippet is
	// defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the
	// snippet and the body will be expanded and inserted.
	// Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position,
	// and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// ====================================================
	// "scope": "javascript,typescript",
	// ====================================================
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"prefix": "loggerElf",
		"body": [
			"console.log('$1');",
			"$2"
		],
	},
	"Imports": {
		"prefix": "imports",
		"body": [
			"import fs from 'node:fs';",
			"import fs, { readFileSync } from 'node:fs';",
			"import { readFileSync } from 'node:fs';",
			"$1"
		],
		"description": "define imports"
	},
	/**
	 * Import statements
	 * "description": "Log output to console"
	 */
	"Import readFileSync": {
		"prefix": "readFileSync",
		"body": [
			"import fs, { readFileSync } from 'node:fs';",
			"import { readFileSync } from 'node:fs';",
			"const buffer = readFileSync(new URL('./data.proto', import.meta.url));",
			"$1"
		],
		"description": "Log output to console"
	},
	"import_writeFileSync": {
		"prefix": "writeFileSync",
		"body": [
			"import { writeFileSync } from 'node:fs';",
			"writeFileSync(new URL('./data.proto', import.meta.url), buffer);",
			"$1"
		],
		"description": "Log output to console"
	},
	"Import walkDirectories": {
		"prefix": "walkDirectories",
		"body": [
			"import { walkDirectories } from 'walk-directories';",
			"import { writeFileSync } from 'node:fs';",
			"const directory = `${process.env.CLOUDNOTES}/elvenware/development`;",
			"const ext = '.md';",
			"const fileInfos = await walkDirectories(directory, ext)",
			".catch((error) => {",
			"debug('ERROR', error);",
			"throw new elfUtils.UserException('no infos');",
			"});",
			"if (fileInfos.length === 0) {",
			"throw new elfUtils.UserException('We received nothing');",
			"}",
			"for (const fileInfo of fileInfos) {",
			"console.log('fileInfo', fileInfo);",
			"processFile(fileInfo)",
			"}"
		],
		"description": "Log output to console"
	},
	"elven-walkSimple": {
		"prefix": "walkSimple",
		"body": [
			"import { walkSimple } from 'walk-directories';",
			"import { writeFileSync } from 'node:fs';",
			"async function walkSimple(directory, ext) {" ,
			"const directory = `${process.env.CLOUDNOTES}/elvenware/development`;",
			"const ext = '.md';",
			"const fileInfos = await walkSimple(directory, ext)",
			".catch((error) => {",
			"debug('ERROR', error);",
			"throw new elfUtils.UserException('no infos');",
			"});",
			"if (fileInfos.length === 0) {",
			"throw new elfUtils.UserException('We received nothing');",
			"}",
			"for (const fileInfo of fileInfos) {",
			"console.log('fileInfo', fileInfo);",
			"processFile(fileInfo)",
			"}",
			"}"
		]
	}
}
